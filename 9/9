・親は祖先である
・親の親は祖先である
・親の親の親は祖先である
・親の親の親の親は祖先である
・親の親の親の親の親は祖先である
・親の親の親の親の親の親は祖先である

・上記のような条件だと祖先の数分定義をシなくてはいけないので大変


再帰による記述
・１親は祖先である
	・祖先の親は祖先である
prolog
・sosen(X,Y) :- parent(X,Y)　
・sosen(X,Y) :- parent(X,Z), sosen(Z,Y).
・sosen(X,Y) :- parent(Z,Y), sosen(X,Z).


・２親は祖先である
	・親の祖先は祖先である
prolog
・sosen(X,Y) :- parent(X,Y). //再帰の時に必ずストップさせるところで１と共通
・sosen(X,Y) :- parent(Z,Y), sosen(X,Z).
・sosen(X,Y) :- sosen(X,Z), parent(Z,Y).

family2.pl
parent(pam, bob).
parent(tom, bob).
parent(tom, liz).
parent(bob, ann).
parent(bob, pat).
parent(pat, jim).
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).


prologの使い方
[ファイル名]. //ファイル読み込み
trace.



順序の計画
・ある問題に対しスキーマが与えられる
・スキーマとは取りうる手段でどんな順番で進めていけば目的までたどり着けるのか

・同じような積み木を作る場合
	・まず下の積み木を作るためにどれをおろしてどれを積み上げていけば最短で完成する
	の	か

・monkey-banana-problem
	・猿ができること
		・歩く
		・台を押す
		・台に登る
		・バナナをつかむ

・この４つのスキーマをどの順番で実行すればたどり着けるのか
※台を降りるというスキーマは成功した時に必要ないので、自動的にバックトラック（前の状態まで戻る）ので問題ない

・スキーマの優先順位をつける
４つを高い順に書いていく



・動作　歩く
	・前提条件
		・猿が床の上にいること（台には載っていない）
・結果　ＡからＢへ場所が変わる

・動作　台を押す
	・前提条件
		・猿が床の上にいる
		・台の隣にいる
・結果　猿と台の位置がＡからＢへ移動

・動作　台に登る
	・前提条件
		・猿が床の上にいる
		・台の隣りにいる
・結果　猿の位置が台の上に移動

・動作　バナナをつかむ
	・前提条件
		・猿が台の上にいる
		・台の上にバナナがある
・結果　猿がバナナをget


課題（さるバナナ問題）
・どのスキーマの並べ方だったらうまく行くのかなぜうまく行かないのか
２４通り全て考える



・遺伝的アルゴリズム（GA)
・適者生存の法則

・キリンの首はなぜ長いのか
	・首が長くなったキリンが生き残ったから


・ある条件を満たすにはどうしたらいいか遺伝子という形で残し、世代を重ねることによってよりいい解に近づける
・交配・突然変異を繰り返していき解を導く

・利用例：スケジューリング



課題
grasp　つかむ
walk あるく
push　押す
climb　登る
の４通りの並べかた

まず、つかむのは前提条件として台の上にいることなので、climbより前にgraspがあることはまずないので climb < grasp

登ると押すは前提として隣に台がないとできない。初期値が台の隣でない限り台に登ったり台を押したりすることはできないので歩く必要がある。よって、waklはpushとclimbの前に来る。walk < pus
h walk < climb



climb < grasp 
push < climb

なので、
	１．walk < push < climb < grasp
or
	２．walk < climb < push <grasp

上記の２つの例ではどちらが早いのか？
初期値が台の隣でなく、次に歩いた時に題があり、台の上にバナナがある場合で考える。

まず、１から。
graspする　台の上でないのでできない
climbする　台が隣にないのでできない
pushする　台が隣にないのでできない
walkする　できる

graspする　できない
climbする　できる
graspする　バナナGET


２では
graspする　できない
pushする　できない
climbする　できない
walkする　できる

graspする　できない
pushする　できる
graspする　できない
pushする　できる
graspする　できない
pushする　できる
無限ループ

よって１がバナナをゲットできる


まとめ
　それぞれのスキーマには前提条件があり、例えばgraspの前提条件は台の上にいる必要がある。その条件をクリアしてからでないといけないのでclimbしてからgraspするという順番が生まれる。
　また、climbとpushは隣に台がないとできない。初期値でとなりに台があればいいが、なければwalkする必要があるので、walkしてからclimbかpushをするという順番が生まれる。

 climbとpushの順番はclimbの次にgraspがあることを考えるとclimbできたらgraspをして、climbできなかったらpushをする。pushできたらgraspするだと無限ループで猿が死ぬ。
grasp < climb < push < walk
　
「してから」を「できたら」にするとわかりやすい。


　


