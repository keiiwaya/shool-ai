小さな迷路
　・入り口と出口がつながっている状態の時どういけばゴールにたどり着けるか、解法の一
　つとして常に左壁に沿って進むものがある
　・パット見では

探索
　・問題木（とりうる選択肢を木構造で表現）
　　・S..start, G..goal, D..deadend

　・縦型探索（深さ優先探索）
　　・          open                                         　　取り出し
　　・１．　　　　　（）
　　・2.         (S)
　　・3.openの先頭を取り出し、次に行けるノードを見つける a1, a2         S
　　・4.openの先頭に次に行けるノードを入れる　(a1 a2)
　　・5.openの先頭を取り出し、次に行けるノードを見つける e1, e2         a1
　　・6.openの先頭に次に行けるノードを入れる (e1 e2 a2)
　　・7.openの先頭を取り出し、次に行けるノードを見つける f1, f2         e1
　　・8.openの先頭に次に行けるノードを入れる (f1 f2 e2 a2)
　　・9.openの先頭を取り出し、次に行けるノードを見つける (行き止まり)     
　　・10.(f2 e2 a2)
　　・11.なし                                                    e1
　　・12.(e2 a2)
　　・13.なし
　　・14.(a2)
　　・15.b1 b2                                                  a2
　　・16.(b1 b2)
　　・17.c1 c2
　　・18.(c1 c2 b2)
　　・19.なし                                                    c1
　　・20.(c2 b2)
　　・21.d1 d2
　　・22.(d1 d2 b2)
　　・23.なし
　　・24.(d2 b2)
　　・25.G
　　・26.(G b2)
　　・27.先頭を取り出したらGなので終了


　・横型探索（幅優先探索）
　　・　・          open                                         　　取り出し
　　・１．　　　　　（）
　　・2.         (S)
　　・3.openの先頭を取り出し、次に行けるノードを見つける a1, a2         S
　　・4.openの先頭に最後に行けるノードを入れる　(a1 a2)
　　・5.openの先頭を取り出し、次に行けるノードを見つける e1, e2         
　　・6.openの最後に次に行けるノードを入れる (a2 e1 e2)
　　・7.openの先頭を取り出し、次に行けるノードを見つける b1 b2         
　　・8.openの最後に次に行けるノードを入れる (e1 e2 b1 b2)
　　・9.openの先頭を取り出し、次に行けるノードを見つける f1 f2     
　　・10.(e2 b1 b2 f1 f2)
　　・11.なし                                                    
　　・12.(b1 b2 f1 f2)
　　・13.c1 c2
　　・14.(b2 f1 f2 c1 c2)
　　・15.なし                                                  
　　・16.(f1 f2 c1 c2)
　　・17.なし
　　・18.(f2 c1 c2)
　　・19.なし                                                    
　　・20.(c1 c2)
　　・21.なし
　　・22.(c2)
　　・23.d1 d2
　　・24.(d1 d2)
　　・25.なし
　　・26.(d2)
　　・27.G
　　・28.(G)
　　・29.Ｇなので終了


縦型探索とヨコ型探索のどちらが速く解にたどり着くかは、問題による。縦は


・appendは非破壊的な結合コマンド（ｘとｙをつなげたとしても、xとy自体は変化しない）
動作は繋げたいものをコピーして繋げたいものにつなげている。


